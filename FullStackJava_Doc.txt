DATE:10.02.2025
========================================
FULL STACK JAVA
======================================================================
SOFTWARE
========================
MYSQL
JAVA17 ONWARDS
NODEJS
IDE
==========================
STS==SPRING TOOL SUITE
VISUAL SOURCE CODE
POSTMAN
DBMS
========================================
DATABASE MANAGEMENT SYSTEM
=============================================
DATABASE IS COLLECTION OF INTERELATED DATA OR TABLES
DBMS==DATABASE+SQL(STRUCTURED QUERY LANGUAGE)
1ST GEN===0,1
2ND GEN===ASSEMBLY LANGUAGE===ASSEMBLER===0,1
3RD GEN====HLL===COMPILER/INTERPRETER====0,1
            JAVA
            ARRAY
4GL===NON PROCEDURAL LANGUAGE
      HERE HOW PART IS NOT KNOWN TO US
      ONLY WHAT PART IS KNOWN TO US
SELECT * FROM EMP;
RDBMS
=====================
SOFTWARE
====================
ORACLE
MYSQL
SQLSERVER
======================================================================================
SQL COMMAND
========================================================
DDL===DATA DEFINATION LANGUAGE
CREATE,ALTER,RENAME,DROP,TRUNCATE,PURGE
DATA RETRIEVAL====SELECT
DML==DATA MANIPULATION LANGUAGE
INSERT,UPDATE,DELETE,MERGE
TCL===TRANSACTION CONTROL LANGUAGE
COMMIT,ROLLBACK,SAVEPOINT
DCL==DATA CONROL LANGUAGE
=======================
GRANT,REVOKE
================================================================
LOGIN IN MYSQL
============================================================
MySQLCOMMAND LINE RUNNER
COMMAND PROMPT
WORKBENCH
==============================================
mysql> CREATE TABLE CUSTOMER
    -> (CID VARCHAR(10),
    ->  CNAME VARCHAR(25),
    ->  CPHNO  VARCHAR(10)
    -> );
Query OK, 0 rows affected (0.04 sec)
DESC CUSTOMER;
INSERT INTO CUSTOMER VALUES('C1','ARUP','565656');
SELECT * FROM CUSTOMER;
CONSTRAINTS
===============================================
BEFORE INSERTING ANY ROW OF A TABLE YOU HAVE TO STATISFY CERTAIN RULES AND REGULATIONS CALLED
CONSTRAINT
TYPES OF CONSTRAINTS
============================================
1.PRIMARY KEY===DOES NOT ACCEPT NULL VALUE AS WELL AS DUPLICATE VALUE
2.UNIQUE KEY===========DOES NOT ACCEPT DUPLICATE VALUE BUT ACCEPT NULL VALUE
3.NOT NULL=============CAN'T ALLOW NULL VALUE
4.CHECK CONSTRAINTS
5.FOREIGN KEY

mysql> CREATE TABLE DEPT
    -> (DEPTNO VARCHAR(10),
    ->  DNAME  VARCHAR(25) NOT NULL,
    ->  LOC    VARCHAR(25) NOT NULL,
    -> CONSTRAINT DEPT_DEPTNO_PK PRIMARY KEY(DEPTNO)
    -> );
Query OK, 0 rows affected (0.04 sec)

DESC DEPT;
INSERT INTO DEPT VALUES('D1','MKTG','KOLKATA');
INSERT INTO DEPT VALUES('D2','FINANCE','CHENNAI');
INSERT INTO DEPT VALUES('D3','HR','DELHI');
INSERT INTO DEPT VALUES('D4','OPRN','KOLKATA');

SELECT * FROM DEPT;


mysql> CREATE TABLE EMP
    -> (EID VARCHAR(10),
    ->  ENAME VARCHAR(25) NOT NULL,
    ->  JOB   VARCHAR(25),
    ->  SAL   DECIMAL,
    ->  COMM  DECIMAL,
    ->  HIREDATE DATE,
    ->  DEPTNO VARCHAR(10),
    -> CONSTRAINT EMP_EID_PK PRIMARY KEY(EID),
    -> CONSTRAINT EMP_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO)
    -> );
DESC  EMP;
DATE===YYYY-MM-DD
INSERT INTO EMP VALUES('E1','SUMAN','MANAGER',50000,5000,'2018-02-12','D1');
INSERT INTO EMP VALUES('E2','ALOKE','CLERK',25000,2000,'2016-02-15','D1');
INSERT INTO EMP VALUES('E3','ANNANYA','ANALYST',45000,6000,'2016-05-15','D2');
INSERT INTO EMP VALUES('E4','RUPAM','MANAGER',65000,NULL,'2017-05-15','D2');
INSERT INTO EMP VALUES('E5','JAYANTA','CLERK',30000,NULL,'2018-07-18','D3');
INSERT INTO EMP VALUES('E6','ROBIN','MANAGER',55000,4000,'2019-05-25','D3');

SELECT * FROM EMP;
ALL RECORDS
===========================
SELECT  * FROM EMP;
SPECIFIC COLUMN
===========================
SELECT ENAME,JOB,SAL FROM EMP;
======================================
RESTRICTION OF DATA
==========================================
SELECT * FROM EMP WHERE ENAME='SUMAN';
SELECT * FROM EMP WHERE JOB='MANAGER';
===========================================
IN CLAUSE
===============================================
SELECT * FROM EMP WHERE JOB IN('CLERK','MANAGER');
==================================================
SELECT * FROM EMP WHERE JOB NOT IN('CLERK','MANAGER');
=====================================================
AND OPERATOR
=======================================================
SELECT * FROM EMP WHERE JOB='MANAGER' AND SAL>50000;
=====================================================
OR OERATOR
======================================================
SELECT * FROM EMP WHERE JOB='CLERK' OR SAL >50000;
=========================================================
LIKE OPERATOR
===========================================================
SELECT * FROM EMP WHERE ENAME LIKE 'A%';
SELECT * FROM EMP WHERE ENAME LIKE '_L%';
SELECT * FROM EMP WHERE ENAME LIKE '%A';
SELECT * FROM EMP WHERE ENAME LIKE '%A%';
============================================================
COMPUTED FIELD
=============================================================
SELECT ENAME,JOB,SAL,COMM,SAL+COMM FROM EMP;
SELECT ENAME,JOB,SAL,COMM,IFNULL(COMM,0) COMMS,SAL+IFNULL(COMM,0) TOTALSAL FROM EMP;

CREATE TABLE EMP1 AS SELECT * FROM EMP;
===============================================================================
DUPLICATE TABLE WITHOUT DATA
=============================================================================
CREATE TABLE EMP2 AS SELECT * FROM EMP WHERE 1=2;
==============================================================================
CREATE TABLE EMP3 AS SELECT * FROM EMP;
DELETE FROM EMP3  WHERE EID='E6';
UPDATE EMP3 SET SAL=3000,COMM=9000 WHERE EID='E2';
SELECT * FROM EMP3;
==============================================================================
SELECT E.ENAME,E.JOB,E.SAL,E.COMM,D.DEPTNO,D.DNAME,D.LOC
FROM EMP E,DEPT D
WHERE E.DEPTNO=D.DEPTNO;
==========================================================
SELECT E.ENAME,E.JOB,E.SAL,E.COMM,D.DEPTNO,D.DNAME,D.LOC
FROM EMP E JOIN DEPT D ON(E.DEPTNO=D.DEPTNO);
=======================================================
SELECT E.ENAME,E.JOB,E.SAL,E.COMM,D.DEPTNO,D.DNAME,D.LOC
FROM EMP E LEFT OUTER  JOIN DEPT D ON(E.DEPTNO=D.DEPTNO);

SELECT E.ENAME,E.JOB,E.SAL,E.COMM,D.DEPTNO,D.DNAME,D.LOC
FROM EMP E RIGHT OUTER  JOIN DEPT D ON(E.DEPTNO=D.DEPTNO);

VIEW
===================================
LOGICAL STRUCTURE OF A TABLE
IT DOES NOT STORE DATA.IT ONLY HOLDS STRUCTURE

CREATE VIEW EMP_DEPT_RIGHT
AS
SELECT E.ENAME,E.JOB,E.SAL,E.COMM,D.DEPTNO,D.DNAME,D.LOC
FROM EMP E RIGHT OUTER  JOIN DEPT D ON(E.DEPTNO=D.DEPTNO);

SELECT * FROM EMP_DEPT_RIGHT;
DESC EMP_DEPT_RIGHT;

SELECT * FROM EMP ORDER BY SAL;

SELECT * FROM EMP ORDER BY SAL DESC LIMIT 2;

CREATE TABLE ORDER_DTLS
(ORDERID  INT AUTO_INCREMENT,
 PID      VARCHAR(10),
 PQTY     DECIMAL,
 PRICE    DECIMAL,
 ORDERDT  DATE   DEFAULT(CURRENT_DATE),
 CONSTRAINT ORDER_DTLS_ORDERID_PK PRIMARY KEY(ORDERID)
);

INSERT INTO ORDER_DTLS(PID,PQTY,PRICE) VALUES('P1',5,25000);
INSERT INTO ORDER_DTLS(PID,PQTY,PRICE) VALUES('P2',15,18000);
SELECT * FROM ORDER_DTLS;

MAVEN
=====================================================================
MAVEN IS A BUILD TOOL
PURPOSE 
===========================================
AUTOMATE THE BUILDING PROCESS
=======================================================
BUILDING PROCESS
=====================================================================
1.DOWNLOAD THE JAR FILES/LIBRARIES
2.COMPILE THE SOURCE CODE
3.EXECUTE THE TEST CASES
4.PACKAGE INTO JAR OR WAR  OF JAVA APPLICATION
=====================================================
TERMS
===============================================
ARCHIETYPE====TYPE OF PROJECT
              QUICK START,WEB
GROUP ID====ORGANIZATION NAME
             com.arindam
ARTIFACT ID===NAME OF THE PROJECT
VERSION======SNAPSHOT====UNDER DEVELOPING
             REALEASE
DEPENDENCY====JAR FILES/LIBRARIES
REPOSITORY===WHERE THE JAR FILES ARE STORED
 THREE KIND OF REPOSITORIES
=================================
1.LOCAL
2.CENTRAL
3.REMOTE
GOAL
=======================
CLEAN
COMPILE
TEST
PACKAGE
=================================================================
DATE:11.02.2024
=============================================================
JDBC
=================================================================
JAVA DATABASE CONNECTIVITY
import java.sql.*;====SET OF CLASSES AND SET OF INTERFACES
LIST OF INTERFACES
Connection====TO ESTABLISH THE CONNECTION
Statement====EXECUTE SQL QUERIES
PreparedStatement=====EXECUTE PRE COMPILED SQL STATEMENT
CallableStatement====TO EXECUTE STORED PROCEDURE
ResultSet========STORE DATA INTO RESULTSET
ResultSetMetaData====GIVING DETAILS INFORMATION OF RESULTSET
DatabaseMetaData=====GIVING DETAILS INFORMATION OF DATABASE
CLASSES
===================================
DriverManager====REGISTER AND LOAD THE JDBC DRIVER
Date==========DEALING WITH DATE DATA TYPES
TimeStamp======DEALS WITH BOTH DATE AND TIME
EXCEPTION HANDLE HERE
=====================================
1.ClassNotFoundException
2.SQLException
TYPES OF DRIVER
===============================
1.JDBC-ODBC BRIDGE========TYPE-I DRIVER
2.NATIVE API-ALL JAVA=====TYPE-II DRIVER
3.JDBC NETWORK -ALL JAVA==TYPE-III DRIVER
4.NATIVE PROTOCOL -ALL JAVA==TYPE-IV DRIVER
===========================================================
mysql> CREATE DATABASE TESTINGDBS;
Query OK, 1 row affected (0.01 sec)

mysql> USE TESTINGDBS;
Database changed
mysql> SHOW TABLES;
Empty set (0.00 sec)
CREATE TABLE CUSTOMER
(CID VARCHAR(10),
 CNAME VARCHAR(25) NOT NULL,
 CPHNO VARCHAR(10) NOT NULL,
CONSTRAINT CUSTOMER_CID_PK PRIMARY KEY(CID)
);

INSERT INTO CUSTOMER VALUES('C1','ARUP','656556');
INSERT INTO CUSTOMER VALUES('C2','SUMAN','464464');
SELECT * FROM CUSTOMER;
------------------------------------------------------------------
private Connection cn=null;
	private Statement  st=null;
	private ResultSet rs=null;
	private String select_sql="select * from customer";


public class JavaMySqlConn {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
  TestConnection ts=new TestConnection();
  ts.getData();
	}

}
System.out.println(rs.getString(1)+"===>"+rs.getString(2)+"====>"+rs.getString(3));
STEPS OF COMMUNICATION JAVA WITH DATABASE

=======================================
1.import java.sql.*;
2.REGISTER AND LOAD THE JDBC DRIVER
3.ESTABLISH CONNECTION
4.CREATE THE STATEMENT
5.EXECUTE THE STATEMENT
6.RETRIEVE DATA INTO RESULTSET
String delete_sql="delete from customer where cid=?";
String update_sql="update customer set cname=?,cphno=? where cid=?";

public int add()
{



}
public Connection getConn()
{

}
HibernateAll

=============================================================================
HIBERNATE
==============================================================================
HIBERNATE IS A ORM TOOL
.java===compile===.class===container===.java===.class==o/p
.java===compile===.class==container==o/p
POJO CLASS
======================
POJO===PLAIN OLD JAVA OBJECT
GETTER()  SETTER() CONSTRUCTOR

mysql> CREATE DATABASE HBDBST;
Query OK, 1 row affected (0.03 sec)


public class ClientApp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
EntityTransaction tx=null;
EntityManagerFactory emf=Persistence.createEntityManagerFactory("AppDB");
EntityManager em=emf.createEntityManager();//for create update delete
tx=em.getTransaction();//TRANSACTION CREATED
tx.begin();//start the transaction
Customer cs1=new Customer("C1","ARUP","566565");
em.persist(cs1);//SAVE THE DATA
tx.commit();
emf.close();

	}

}

@Entity
@Table(name="Employee_master")
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
private Integer eid;
	@Column(length = 25,nullable = false)
private String ename;
	@Column(name="job",length = 25)
private String edesig;
private Double sal;
@Temporal(TemporalType.DATE)
private Date joindt;
@Temporal(TemporalType.TIMESTAMP)
private Date workhr;
@Transient
private String email;

Employee emp1=new Employee();
Employee emp2=new Employee();
emp1.setEname("ALOKE");
emp1.setEdesig("MANAGER");
emp1.setSal(54000.00);
emp1.setJoindt(new Date());
emp1.setWorkhr(new Date());
emp1.setEmail("al@gmail.com");
emp2.setEname("AYAN");
emp2.setEdesig("ANALYST");
emp2.setSal(45000.00);
emp2.setJoindt(new Date());
emp2.setWorkhr(new Date());
emp2.setEmail("ay@gmail.com");
em.persist(emp1);
em.persist(emp2);
tx.commit();
emf.close();
==============================================================================
DATE:12.02.2025
==============================================================================
@Entity===CLASS NAME SAME AS TABLE NAME
@Table
@Id=====PRIMARY KEY
@Column=== length,name,nullable=false
@GeneratedValue===AutoInncrement
                 strategy===GenerationType.IDENTITY
@Temporal===TemporalType.Date
            TemporalType.TimeStamp
@Transient
@OneToOne
@JoinColumn
EntityManagerFactory===TO READ THE PERSISTANCE.XML FILE
EntityManager===create,update,delete
Transaction===
persist(object)====SAVE DATA INTO TABLE
OBJECT===ROW OR RECORDS OF A TABLE
CRUD OPERATION
=======================
INSERT
UPDATE
DELETE
FETCH
TO FETCH DATA
==========================================================
1.SQL===KNOWS THE TABLE
2.JPQL===JAVA PERSISTANCE QUERY LANGUGAE===IT KNOWS ONLY CLASS NAME
3.HQL====HIBERNATE QUERY LANGUAGE====IT KNOWS CLASS ONLY
======================================================================

EntityTransaction tx=null;
		EntityManagerFactory emf=Persistence.createEntityManagerFactory("AppDB");
		EntityManager em=emf.createEntityManager();//for create update delete
		tx=em.getTransaction();//TRANSACTION CREATED
		tx.begin();//start the transaction
		//CREATION OF TABLE AND INSERT DATA
		Product pr1=new Product("P1","TV",5,25000.00);//row of table
		Product pr2=new Product("P2","TAB",15,22000.00);//row of table
		//em.persist(pr1);
		//em.persist(pr2);
		//FETNCHING    DATA
		String jpql="select p from Product p";
		Query query=em.createQuery(jpql);
		List<Product> plist=query.getResultList();
		plist.stream().forEach(System.out::println);
		
		tx.commit();
		emf.close();
//UPDATE DATA
		Product ps=em.find(Product.class,"P1");
		if(ps!=null)
		{
			ps.setPname("REFRIGERATOR");
			ps.setPqty(15);
			ps.setPrice(27000.00);
			em.merge(ps);
		}

String hql="from Product";
		//Query query=em.createQuery(jpql);
		Query query=em.createQuery(hql);
		List<Product> plist=query.getResultList();
		plist.stream().forEach(System.out::println);
		
		tx.commit();
		emf.close();
===============================================================================
SPRING
===============================================================
1.DESTOP APPLICATION:CORE JAVA,AWT,SWING,SPRING======JAR
2.WEB APPLICATION:SERVLET,JSP,SPRING MVC=============WAR
3.ENTERPRISE APPLICATION==SPRING======================EAR(JAR+WAR)
===============================================================
DEFINATION
==============================================================
SPRING OPEN SOURCE LIGHT WEIGHT DEPENDENCY INJECTION BASED FRAMEWORK SOFTWARE 
TO DEVELOP ENTERPRISE APPLICATION
=====================================================================
TECHNOLOGY
=========
WEB====SERVLET,JSP
MAILING===JAVAMAIL
SMS===JMS
====================================
DESIGN PATTERN
==============================================================
WELL APPROVED SOLUTION
FRAMEWORK
=========================================
FRAMEWORK==TECHNOLOGY+DESIGN PATTERN
RAD==RAPID APPLICATION DEVELOPMENT
===========================================================
FEATURES OF SPRING
===================================================
IT IS A CONTAINER MANAGEMENT SYSTEM
=======================================================
CONATINER
=====================================================
1.SCAN THE CLASSES
2.CREATE THE OBJECT
3.PROVIDE DATA
4.LINKING BETWEEN OBJECT
5.DESTROY THE OBJECT
===========================================================
DEPENDENCY 
===========================================================
INSTANCE VARIABLE ARE DEPENDENCY
TYPES OF DEPENDENCY
=========================
PRIMITIVE TYPES==INT,FLOAT,DOUBLE,BOOLEAN
COLLECTION TYPE===LIST,SET,MAP,PROPERTIES
REFERENCE TYPE
============================================
DEPENDENCY INJECTION
===================================================
PROVIDE THE DATA TO THE DEPENDENCY
LINKING BETWEEN THE OBJECTS
=================================================
MODULE
=============================================
1.SPRING CORE
2.SPRING ORM
3.SPRING DAO
4.SPRING CONTEXT
5.SPRING AOP
6.SPRING WEB
7.SPRING MVC
==============================================
TYPES OF ANNOTATION
================================
BASIC ANNOTATION
STRETOTYPE ANNOTATION
===================================================
PRACTICAL
=================================
1.SPRING BEAN CLASS=====com.arindam.bean=====Customer
2.CONFIGURATION CLASS====com.arindam.config===SpringConfig
3.MAIN CLASS=============com.arindam.client====ClientApp===MAIN SHOULD BE THERE
DEPENDENCY
==========================================
SPRING CORE
============================================================================
READING  DATA FROM PROPERTIES FILE
SETTER INJECTION
==============================================
PRIMITIVE TYPE
LIST
SET
MAP
PROPERTIES
===================================================


eid=E1
ename=ALOKE
friends={AYAN,RAJAT,SAYAN,SAYAN}
phno={7656565,434343}
products={"TV":25000.00,"TAB":22000.00}
pinfo={"panno":"543545as","adharno":"87687weew"}

@Value("#{${products}}")

@Value("#{${pinfo}}")
============================================================
DATE:13.02.2025
============================================================
SPRING
=============================
FRAMEWORK
DEPENDENCY
DEPENDENCY INJECTION
SPRING BEAN
STEREOTYPE ANNOTATION
=================================================
@Component==CREATE THE  OBJECT IN THE CONTAINER

BASIC ANNOTATION
=================================================
@ComponentScan
@Value
@Autowire
==================================================================
LIMITATION OF SPRING
=============================================
1.WE NEED USE LOT OF DEPENDENCIES ALONG WITH COMPATABLE VERSION
2.WE HAVE TO CONFIGURE LOT OF THINGS
3.DEPLOY APPLICATION INTO EXTERNAL SERVER
===============================================================
SPRING BOOT
=======================================================
SPRING BOOT IS AN ARCHITECTURAL STYLE BUILD ON TOP OF THE SPRING

ADVANTAGE
==========================================================
1.STARTER DEPENDENCY
======================================================
RELATED JAR FILES OF DIFFERENT MODULE GROUP TOGETHER INTO SINGLE UNIT
EX:SPRING BOOT STARTER
   SPRING BOOT STARTER WEB
2.AUTOCONFIGURATION
BY DEFAULT AUTOCINFIGURATION IS DISABLE
@EnableAutoConfiguration
3.EMBEDDED SERVER
HOW CAN YOU CREATE THE SPRING BOOT PROJECT
==============================================
1.MAVEN
2.SPRING INITIALIZER
3.SPRING BOOT STARTER
@SpringBootApplication
==============================
@ComponentScan
@Configuration
@EnableAutoConfiguration

myapp.driver=com.mysql.cj.jdbc.Driver
myapp.url=jdbc:mysql//localhost:3306/test
myapp.username=root
myapp.password=arindam


myapp: 
 driver: com.mysql.cj.jdbc.Driver
 url: jdbc:mysql//localhost:3306/test
 username: root
 password: arindam
YML IS BETTER THAN PROPERTIES FILE
=================================
1.MORE READABLE
2.NO  INDEX DUPLICATION REQUIRED
================================================================

mysql> use hbdbst;
Database changed
mysql> show tables;
+------------------+
| Tables_in_hbdbst |
+------------------+
| adhar            |
| customer         |
| emp              |
| employee_master  |
| product          |
+------------------+
5 rows in set (0.02 sec)

CREATE TABLE ACCOUNT
(ACCNO VARCHAR(10),
 CNAME VARCHAR(25) NOT NULL,
 BALANCE  DECIMAL,
 CONSTRAINT ACCOUNT_ACCNO_PK PRIMARY KEY(ACCNO)
);
DESC ACCOUNT;

SPRING BOOT JDBC COMMUNICATION
==============================
DEPENDENCY NEEDED
=========================
1.JDBC API
2.MYSQL

JdbcTemplate
int n=template.update(insert_sql);
		System.out.println("THE NUMBER OF ROWS INSERTED:"+n);
		List aclist=template.queryForList(select_sql);
		aclist.stream().forEach(System.out::println);
==========================================================================
SPRING SCOPE
================================================================
1.SINGLETON
2.PROTOTYPE
3.REQUEST
4.SESSION
========================================================
salesid=S1
cname=ARUP,ALOKE,NAYAN
email=ar@gmail.com,al@gmail.com,ny@gmail.com
purchase.TV=25000.00
purchase.TAB=18000.00
address.streetnm=BEADON STREET
address.city=KOLKATA
========================================================================
SPRING HIBERNATE COMMUNICATION USING SPRING BOOT
======================================================================

SPRING DATA JPA
============================================================
TWO INTERFACE
========================================================
CrudRepository<T,ID>
T==ENTITY CLASS
ID==DATA TYPE OF PRIMARY KEY
JpaRepository<T,ID> extends CrudRepository<T,ID>
save()
findById()
findAll()
delete()
===================================
DEPENDENCY
=====================================
MYSQL
DATA JPA
@Component====OBJECT CREATION
@Repository==Object Creation + Database Operation
@Service=====Object Creation+Transaction Management
@Controller
@RestController
============================================================================
DATE:14.02.2025
============================================================================

REST FULL WEBERVICE
=====================================================================
WEBSERVICE
====================================================================
IT IS USED TO COMMUNICATE BETWEEN TWO INTER OPERABLE APPLICATION
TYPES OF WEBSERVICE
=================================
1.SOAP===SIMPLE OBJECT ACCESS PROTOCOL======ONLY SUPPORT XML
2.REST===REPRESENTATIONAL STATE TRANSFER============BOTH XML AND JSON
================================================================================
HTTP METHODS
===============================================
POST===ADD DATA TO THE SERVER
GET===GET DATA FROM SERVER
DELETE===DELETE DATA FROM SERVER
PUT=======UPDATE DATA TO THE SERVER
PATCH===UPDATE DATA BUT NOT ALL OF THEM
===============================================================================
HTTP STATUS CODE
===================================================================================
404===NOT FOUND
405===INTERNAL SERVER ERROR
200===OK
=====================================================================
ACTION BASED URL
========================================================
http://localhost:1002/xyz/?id=1
                           query parameter
========================================================
RESOURCE BASED URL
===============================================================
http://localhost:1002/xyz/1
                          PATH VARIABLE
==============================================================
CONTROLLLER
RESTCONTROLLER
@Controller===========OBJECT CREATION+WEB APPLICATION
@RestController=======OBJECT CREATION+REST FULL WEBSERVICES
REST API TOOLS
============================
POSTMAN
SWAGGER
================================
JSON===JAVASCRIPT OBJECT NOTATION
=======================================
{
   "cid":"C1",
   "cname":"ARUP"

}
SPRING BOOT REST API
====================================
MYSQL
DATA JPA
SPRING WEB
SPRING DEV TOOLS
=========================================
URL FOR ADDING DATA
============================
http://localhost:1004/product/add

{
    "pid":"P1",
    "pname":"TV",
    "pqty":5,
    "price":25000.00
}
http://localhost:1005/product/fetch/P1
@GetMapping("/fetch/{pid}")
	public ResponseEntity<Product> getPidDetails(@PathVariable String pid)
	{
		Product ps=pservice.getPidDetails(pid);
		return new ResponseEntity<Product>(ps,HttpStatus.OK);
	}

public Product getPidDetails(String pid)
	{
		return prepo.findById(pid).orElse(null);
		
	}
DELETE DATA URL
===========================================================
http://localhost:1005/product/del/P1

UPDATE DATA URL
===================================================================
http://localhost:1005/product/upd/P2
@PutMapping("/upd/{pid}")
	public ResponseEntity<Product> updateData(@PathVariable String pid,@RequestBody Product ps)
	{
		Product pst=pservice.updateData(pid, ps);
		return new ResponseEntity<Product>(pst,HttpStatus.OK);
	}
========================================================================================
FRONT END
=========================================================================================
IDE:VISUAL SOURCE CODE
===========================================================================================
HTML
CSS
BOOTSTRAP
JAVASCRIPT
ECHMASCRIPT
REACT JS
=============================================================================
HTML
======================================
HYPER TEXT MARK UP LANGUAGE
PURPOSE
=======================================================================
TO STRUCTURE THE CONTENT IN WEB PAGE
==============================================================================
WEB PAGE
====================================================================================
IT IS  A ELECTRONIC PAGE TO DISPLAY SOME CONTENTS
==============================================
HTML IS COLLECTION OF CONTENTS
=========================================================
TYPES OF CONTENTS
=================================================================
HEADING ELEMEMT
TABLE ELEMENT
ANCHOR ELEMENT
FORM ELEMENT
=====================================================
ELEMENT IS REPRESENT BY MEANS OF TAG
TYPES OF TAG
================================================
OPENING TAG
CLOSING TAG
SELF CLOSING TAG
========================================
JAVASCRIPT
============================================================
JAVASCRIPT IS A PROGRAMMING LANGUAGE.BEFORE 2101 IT IS CALLED SCRIPTING LANGUAGE
NOW IT CAN BE COMMUNICATE DATABASE,FRONT END AND BACK END SERVER
=====================================================================
PURPOSE
==========================================================================
DYNAMIC WEB PAGE
VALIDATION TO SERVER SIDE AND CLIENT SIDE
==============================================================
NODE JS
==========================================================
JAVASCRIPT RUN TIME ENVIRONMENT
=============================================================

DATA TYPES
=============================================================================
UI FOLDER NAME
============================================
UIFRONTENDREACTJS
================================================
DATE:15.02.2025
=================================================================================
FUNCTION
========================================================
1.CONCRETE FUNCTION
2.PARAMERISED FUNCTION
3.FUNCTION WITH RETURN STATEMENT
4.CALLBACK FUNCTION
5.ANNONYMOUS FUNCTION
6.HIGHER ORDER FUNCTION
7.ARROW FUNCTION
===================================================================
DOM
=======================================================
DOCUMENT OBJECT MODEL
========================================================
THE HTML ELEMENT PARESED INTO OBJECTS CALLED NODES AND IT WILL FORM TREE DATA STRUCTURE
CALLED DOM
=================================================================================
BROWSER ENGINE==SOFTWARE

HTML===COMPILED===BYTES===TOKEN===OBJECT(NODES)
=================================================================================
EVENT HANDELLING
===============================================================================
REACT JS
======================================================================

REACT IS JAVASCRIPT JAVASCRIPT LIBRARY.
REACT ELEMENT

<script>
        const createUi=()=>{
           var btnRef= React.createElement("button",null,"CLICKED");
           ReactDOM.render(btnRef,document.getElementById("root"));
        }
        createUi();
    </script>
REACT IS  A JAVASCRIPT LIBRARY.
LIBRARY===COLLECTION OF CLASSES AND FUNCTIONS
PURPOSE
=============================
CREATE USER INTERACE
REACT+OTHER LIBRARIES====FRONT END APPLICATION
REACT ELEMENT====REACT DOM====RENDER()====DOM==DOM+CSSDOM==RENDERING TREE==PAINT ON BROWSER
JSX
==================================================================
JSX====BABEL=====REACT ELEMENT===REACT DOM====RENDER()====DOM==DOM+CSSDOM==RENDERING TREE==PAINT ON BROWSE
JSX IS 99% SIMILAR TO HTML
JSX SHOULD WRITTEN IN JS FUNCTION
========================================================================
CRA========CREATE REACT APP  TOOL
=========================================================================
NPM====INSTALL THE TOOL
NPX====RUN THE TOOL
=========================================================================================
npx create-react-app appdemo

AFTER CREATING PROJECT IN REACT JS 19 WITH CRA TOOL
=====================================================
1.Index.js FILE
===============================================
COMMENT ON LINE NO 1 AND LINE NO 17
2.IN APP.JS FILE
=================================================
1.DELETE <header> </header> TAG
2.COMMENT ON LINE NO 1
=======================================================
REACT HOOK
============================================================
IT IS A JAVASCRIPT FUNCTION USED FOR SPECIAL PURPOSE
use<NAME>
useState
useEffect
useReducer
useRef
useContext
useCallback
=============================================================
DATE:16.02.2025
=============================================================
PROPS
=======================
WHEN YOU PASS THE VALUE FROM ONE COMPONENT TO HIS CHILD COMPONENT

AXIOS
=====================================================================
AXIOS IS USED TO COMMUNICATE TO THE EXTERNAL SERVER
npm install axios
"https://randomuser.me/api/?results=20"
 <button className='btn btn-outline-secondary' onClick={getData}>GETDATA</button>
{
        user.length>0 &&(
            <div>
            <input type="radio" name="gender" value="all" defaultChecked/>All
            <input type="radio" name="gender" value="male" />male
            <input type="radio" name="gender" value="female" />female
            </div>
        )
      }


.
const filterData=(event)=>{
      if(event.target.value==='male')
      {
        setUser(data.filter((element,index)=>{
            return element.gender==='male';
        }))
      }
      else if(event.target.value==='female')
        {
          setUser(data.filter((element,index)=>{
              return element.gender==='female';
          }))
        }
        else{
            setUser(data);
        }
    }
=========================================================================================
DATE:17.02.2025
========================================================================================
ROUTING AND NESTED ROUTING
=========================================================================================
OPEN index.js file under src folder
import { BrowserRouter as Rt } from "react-router-dom";
WITHN render() method

<Rt>
    <App />
    </Rt>
   <Route path="/contact" element={<Contact/>}/>
=======================================================================================
BOOT RACT INTEGRATION
====================================================================================
BOOT PROJECT===1005
REACT JS======3000
http://localhost:1005/product/fetch

@CrossOrigin(origins="http://localhost:3000/")

{
    "pid":"P3",
    "pname":"TAB",
    "pqty":1,
    "price":18000.00
}

http://localhost:1005/product/add
======================================================================================
DATE:18.02.2025
========================================================================================
FOODAPP
DEENDENCY
===================================
MYSQL
DATAJPA
SPRINGWEB
SPRING DEV TOOLS
====================================================

http://localhost:1004/food/add
{
  "fid":"F1",
  "fname":"MOMO",
  "price":200.00
} 
=======================================
Food.js
Food.css
AddFood.js
DelFood.js
UpdFood.js
SearchFood.js
FoodList.js
================================================
Register
============================
uname pk lengh=15
pass notnull 10
nm   length 25
phno  length 10
email  length 30
ONLY SAVE AND FETCH
 












































               

















































